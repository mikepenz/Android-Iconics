/*
 * Copyright (C) 2020 Mike Penz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

/**
 * retrieves a value from the local properties
 */
ext.getLocalProps = {
    Properties localProperties = new Properties()
    localProperties.load(new File('local.properties').newDataInputStream())
    return localProperties
}

/**
 * helper method to retrieve a value either from a local property, or via the global defined properties
 */
ext.getLocalOrGlobalProperty = { key ->
    try {
        def val = getLocalProps().getProperty("$key")
        if (val == null) {
            val = getProperty("$key")
        }
        return val
    } catch (ignored) {
        return null
    }
}

/**
 * retrieves a value from the properties or falls back to the default
 */
ext.getProperyOrDefault = { key, defau ->
    def val = null
    try {
        val = project.hasProperty(key) ? project.getProperty(key) : null
    } catch (Exception ex) {
    }
    if (val != null && !val.toString().equals("")) {
        return val
    }
    val = getLocalOrGlobalProperty(key)
    if (val == null || val.toString().equals("")) {
        return defau
    } else {
        return val
    }
}

/**
 * used to sign the app in release mode
 * Further information can be found in the README.md
 */
ext.getSigningFile = {
    return getLocalOrGlobalProperty("openSource.signing.file")
}

/**
 * retrieves the current git hash
 */
ext.gitHash = { ->
    try {
        def outstream = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = outstream
        }
        return outstream.toString().trim()
    } catch (Exception ex) {
        logger.warn('The build was not able to resolve the git branch, this project seems to be not within a git project')
        return ""
    }
}

/**
 * retrieves the current git branch
 */
ext.gitBranch = { ->
    try {
        def outstream = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'name-rev', '--name-only', 'HEAD'
            standardOutput = outstream
        }
        return outstream.toString().trim()
    } catch (Exception ex) {
        logger.warn('The build was not able to resolve the git branch, this project seems to be not within a git project')
        return ""
    }
}

/**
 * retrieves the current timestamp during the build
 */
ext.buildDate = { ->
    return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm").format(new Date())
}

/**
 * Checks if this build is from an IDE
 */
ext.isIdeBuild = { ->
    return project.properties['android.injected.invoked.from.ide'] == 'true'
}